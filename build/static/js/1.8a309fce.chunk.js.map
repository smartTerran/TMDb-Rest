{"version":3,"sources":["containers/TV/TV.module.scss","containers/TV/TV.js"],"names":["module","exports","TV__Body","TV","carouselSlideRef","React","createRef","state","categoryNames","airingToday","onTheAir","popular","startInterval","_this","timeoutID","setInterval","arrowClickedHandler","dotClickedHandler","tvId","props","onChangeCarouselTV","current","resetCarouselAutoSlide","arrow","onChangeCarouselTVArrow","showLength","clearInterval","resizeSlide","onResizeCarouselSlide","getTVDetailsHandler","onGetTVDetails","modalOpened","listArrowClickedHandler","category","onChangeTVList","window","addEventListener","this","onFetchTVInit","scrollTo","removeEventListener","onResetTranslateTV","history","action","location","modal","_this2","carousel","content","listLength","filmList","innerWidth","u","tv","tvPathBase","pathname","airingTodayTV","videos","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","_components_ORGANISMS_Carousel_O_Carousel__WEBPACK_IMPORTED_MODULE_8__","slice","dotClicked","arrowClicked","translateX","translateSlide","slideRef","videoClicked","pathBase","Object","entries","forEach","_ref","_ref2","_Volumes_WORK_Web_Projects_ReactJS_FilmBase_React_App_frontend_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","key","tvList","push","react__WEBPACK_IMPORTED_MODULE_6__","_components_ATOMS_FilmList_A_Category_A_Category__WEBPACK_IMPORTED_MODULE_9__","_components_ORGANISMS_Discover_O_DiscoverBody__WEBPACK_IMPORTED_MODULE_10__","results","context","page","showPage","isImgLoaded","loading","Fragment","className","c","_components_ATOMS_UI_A_Spinner_A_Spinner__WEBPACK_IMPORTED_MODULE_11__","loadingInit","pageTitle","Component","connect","app","dispatch","actions","element"],"mappings":"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","file":"static/js/1.8a309fce.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"TV__Body\":\"TV_TV__Body__K7Nz0\"};","import React, { Component, Fragment } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Carousel from '../../components/ORGANISMS/Carousel-O/Carousel';\r\nimport Category from '../../components/ATOMS/FilmList-A/Category-A/Category';\r\nimport TVBody from '../../components/ORGANISMS/Discover-O/DiscoverBody';\r\nimport Spinner from '../../components/ATOMS/UI-A/Spinner-A/Spinner';\r\n\r\nimport * as actions from '../../store/actions/TVActions';\r\nimport * as u from '../../shared/Utility';\r\nimport c from './TV.module.scss';\r\n\r\nclass TV extends Component {\r\n  carouselSlideRef  = React.createRef();\r\n\r\n  state = {\r\n    categoryNames: {\r\n      airingToday: 'Airing Today', \r\n      onTheAir: 'On The Air', \r\n      popular: 'Popular'\r\n    }\r\n  }\r\n  \r\n  componentDidMount() {\r\n    window.addEventListener('resize', this.resizeSlide);\r\n    this.props.onFetchTVInit();\r\n    this.startInterval();\r\n    window.scrollTo(0, 0);\r\n  }\r\n  \r\n  componentWillUnmount() {\r\n    clearInterval(this.timeoutID);\r\n    window.removeEventListener('resize', this.resizeSlide);\r\n    this.props.onResetTranslateTV();\r\n  }\r\n  \r\n  componentDidUpdate() {\r\n    if(this.modalOpened && this.props.history.action === 'POP' && (!this.props.location.state || !this.props.location.state.modal)) {\r\n      this.startInterval();\r\n      this.modalOpened = false;\r\n    }    \r\n  }\r\n  \r\n  // Start auto rotation of carousel\r\n  startInterval = () => {\r\n    this.timeoutID = setInterval(() => this.arrowClickedHandler('right'), 5000);\r\n  }\r\n\r\n  // Manual changing of carousel tv\r\n  dotClickedHandler = (tvId) => {\r\n    this.props.onChangeCarouselTV(tvId, this.carouselSlideRef.current);\r\n    this.resetCarouselAutoSlide();\r\n  }\r\n  \r\n  arrowClickedHandler = (arrow) => {\r\n    this.props.onChangeCarouselTVArrow(arrow, this.carouselSlideRef.current, this.props.showLength);\r\n    this.resetCarouselAutoSlide();\r\n  }\r\n  \r\n  resetCarouselAutoSlide = () => {\r\n    clearInterval(this.timeoutID);\r\n    this.startInterval()\r\n  }\r\n  \r\n  // Adjust carousel translate amount on window resize\r\n  resizeSlide = () => { \r\n    this.props.onResizeCarouselSlide(this.carouselSlideRef.current);\r\n  }\r\n\r\n  // Get tv details\r\n  getTVDetailsHandler = (tvId) => {\r\n    this.props.onGetTVDetails(tvId); \r\n    clearInterval(this.timeoutID);\r\n    this.modalOpened = true;\r\n  }\r\n\r\n  listArrowClickedHandler = (arrow, category) => {\r\n    this.props.onChangeTVList(arrow, category);\r\n  }\r\n\r\n  render() { \r\n    let carousel    = null,\r\n        content     = null,\r\n        listLength  = 12,\r\n        filmList    = [];\r\n    \r\n    if(window.innerWidth <= 400) {\r\n      listLength = 4;\r\n    } else if(window.innerWidth <= 600) {\r\n      listLength = 6;\r\n    } else if(window.innerWidth <= 900) {\r\n      listLength = 10;\r\n    }\r\n\r\n    if(u.isObjNotEmpty(this.props.tv)) {\r\n      const tvPathBase = this.props.location.pathname,\r\n            airingTodayTV = this.props.tv['airingToday'].videos;\r\n            \r\n      carousel = <Carousel \r\n        videos={airingTodayTV.slice(0, this.props.showLength)}\r\n        dotClicked={this.dotClickedHandler}\r\n        arrowClicked={this.arrowClickedHandler}\r\n        translateX={this.props.translateSlide}\r\n        slideRef={this.carouselSlideRef}\r\n        videoClicked={this.getTVDetailsHandler}\r\n        pathBase={tvPathBase} />;\r\n\r\n      Object.entries(this.props.tv).forEach(([key, tvList]) => {\r\n        filmList.push(\r\n          <Fragment key={tvList.category}>\r\n            <Category category={this.state.categoryNames[key]} />\r\n            <TVBody\r\n              category={tvList.category}\r\n              results={tvList.videos}\r\n              context='main'\r\n              listLength={listLength}\r\n              page={this.props.showPage[key]}\r\n              arrowClicked={this.listArrowClickedHandler}\r\n              videoClicked={this.getTVDetailsHandler}\r\n              pathBase={tvPathBase}\r\n              isImgLoaded={!this.props.loading[key]} />\r\n          </Fragment>\r\n        );\r\n      });\r\n      \r\n\r\n      content = (\r\n        <>\r\n          {carousel}\r\n          <div className={c.TV__Body}>\r\n            {filmList}\r\n          </div>\r\n        </>\r\n      );\r\n    }\r\n    \r\n    return ( \r\n      <>\r\n        <Spinner loading={this.props.loadingInit} pageTitle='TV' />\r\n        {content}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    tv: state.tv.tv,\r\n    loadingInit: state.tv.loadingInit,\r\n    loading: state.tv.loading,\r\n    translateSlide: state.tv.translateSlide,\r\n    showPage: state.tv.showPage,\r\n    showLength: state.app.showLength,\r\n    listLength: state.app.listLength\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onFetchTVInit: () => dispatch(actions.fetchTVInit()),\r\n    onChangeCarouselTV: (tvId, element) => dispatch(actions.changeCarouselTV(tvId, element)),\r\n    onChangeCarouselTVArrow: (arrow, element, showLength) => dispatch(actions.changeCarouselTVArrow(arrow, element, showLength)),\r\n    onResizeCarouselSlide: (element) => dispatch(actions.resizeCarouselSlideTV(element)),\r\n    onChangeTVList: (arrow, category) => dispatch(actions.changeTVList(arrow, category)),\r\n    onGetTVDetails: (tvId) => dispatch(actions.getTVDetails(tvId)),\r\n    onResetTranslateTV: () => dispatch(actions.resetTranslateTV())\r\n  }\r\n}\r\n \r\nexport default connect(mapStateToProps, mapDispatchToProps)(TV);"],"sourceRoot":""}